name: Test Stellar

on: pull_request

jobs:
  check-relevant-changes:
    name: Check for Relevant Changes
    runs-on: blacksmith-2vcpu-ubuntu-2204
    outputs:
      run_tests: ${{ steps.filter.outputs.contracts == 'true' || steps.filter.outputs.packages == 'true' || steps.filter.outputs.github == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            contracts:
              - 'contracts/**'
            packages:
              - 'packages/**'
            github:
              - '.github/workflows/test-stellar.yaml'
      - name: Summarize Changes
        run: |
          echo "Changes in contracts: ${{ steps.filter.outputs.contracts }}"
          echo "Changes in packages: ${{ steps.filter.outputs.packages }}"
          echo "Changes in github: ${{ steps.filter.outputs.github }}"

  test-stellar:
    name: Test Stellar
    needs: check-relevant-changes
    if: ${{ needs.check-relevant-changes.outputs.run_tests == 'true' }}
    runs-on: blacksmith-4vcpu-ubuntu-2204
    steps:
      # this sets up nested repos: https://github.com/actions/checkout?tab=readme-ov-file#checkout-multiple-repos-nested
      # axelar-contract-deployments
      #   - axelar-amplifier-stellar
      #
      # future steps depend on this directory structure
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout axelar-amplifier-stellar repo
        uses: actions/checkout@v4
        with:
          repository: axelarnetwork/axelar-amplifier-stellar
          path: axelar-amplifier-stellar

      - name: Get Latest Short Commit Hash from axelar-amplifier-stellar
        id: get_short_commit_hash
        run: |
          cd axelar-amplifier-stellar
          git fetch --all
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Hardcoded to ensure consistency.
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Setup Stellar CLI & network
        uses: ./.github/actions/setup-stellar

      - name: Prepare local.json
        run: |
          echo '{
              "chains": {
                  "stellar": {
                      "name": "Stellar",
                      "axelarId": "stellar",
                      "networkType": "local",
                      "chainType": "stellar",
                      "tokenSymbol": "XLM",
                      "tokenAddress": "'"$xlm_address"'",
                      "rpc": "'"$rpc_url"'",
                      "horizonRpc": "http://localhost:8000",
                      "contracts": {}
                  }
              }
          }' > ./axelar-chains-config/info/local.json

      - name: Display local.json
        run: cat ./axelar-chains-config/info/local.json

      - name: Set Artifact Base URL
        id: set_artifact_base_url
        run: |
          ARTIFACT_BASE_URL="https://static.axelar.network/releases/stellar"
          echo "url=${ARTIFACT_BASE_URL}" >> $GITHUB_OUTPUT

      - name: Setup Stellar wallet
        id: setup_wallet
        run: |
          stellar keys generate test \
              --rpc-url "${{ steps.setup_network.outputs.rpc_url }}" \
              --network-passphrase "${{ steps.setup_network.outputs.network_passphrase }}" \
              --fund
          echo "private_key=$(stellar keys show test)" >> $GITHUB_OUTPUT
          echo "stellar_address=$(stellar keys address test)" >> $GITHUB_OUTPUT

      - name: Prepare .env
        run: |
          echo "PRIVATE_KEY=${{ steps.setup_wallet.outputs.private_key }}" >> .env
          echo "ENV=local" >> .env
          echo "CHAIN=stellar" >> .env
          echo "YES=true" >> .env

      ###### Command: Deploy Contracts ######
      - name: Deploy Contracts
        run: |
          # List of contracts to deploy
          CONTRACTS=("AxelarOperators" "AxelarGasService")

          for CONTRACT in "${CONTRACTS[@]}"; do
            # Derive CONTRACT_DIR by:
            # - Converting the CONTRACT name to lowercase.
            # - Replacing any non-alphanumeric characters with a hyphen (-).
            # - Prefixing with "stellar-".
            CONTRACT_DIR="stellar-$(echo $CONTRACT | sed 's/\([^A-Z]\)\([A-Z]\)/\1-\2/g' | tr '[:upper:]' '[:lower:]')"

            # Derive CONTRACT_NAME by:
            # - Replacing hyphens in the CONTRACT_DIR with underscores (_).
            CONTRACT_NAME=$(echo "${CONTRACT_DIR}" | sed 's/-/_/g')

            ARTIFACT_URL="${{ steps.set_artifact_base_url.outputs.url }}/${CONTRACT_DIR}/${{ steps.get_short_commit_hash.outputs.hash }}/wasm/${CONTRACT_NAME}.wasm"
            LOCAL_PATH="./artifacts/${CONTRACT_NAME}.wasm"

            mkdir -p ./artifacts
            echo "Downloading $CONTRACT from $ARTIFACT_URL"
            curl -sSfL "$ARTIFACT_URL" -o "$LOCAL_PATH"

            echo "Deploying $CONTRACT from $LOCAL_PATH"
            node stellar/deploy-contract deploy "$CONTRACT" --artifact-path "$LOCAL_PATH"
          done
