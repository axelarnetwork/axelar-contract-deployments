name: Test Stellar

on: pull_request

jobs:
  check-relevant-changes:
    name: Check for Relevant Changes
    runs-on: blacksmith-2vcpu-ubuntu-2204
    outputs:
      run_tests: ${{ steps.filter.outputs.stellar == 'true' || steps.filter.outputs.common == 'true' || steps.filter.outputs.github == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            stellar:
              - 'stellar/**'
            common:
              - 'common/**'
            github:
              - '.github/workflows/test-stellar.yaml'
      - name: Summarize Changes
        run: |
          echo "Changes in stellar: ${{ steps.filter.outputs.stellar }}"
          echo "Changes in common: ${{ steps.filter.outputs.common }}"
          echo "Changes in github: ${{ steps.filter.outputs.github }}"

  test-stellar:
    name: Test Stellar
    needs: check-relevant-changes
    if: ${{ needs.check-relevant-changes.outputs.run_tests == 'true' }}
    runs-on: blacksmith-2vcpu-ubuntu-2204
    steps:
      # this sets up nested repos: https://github.com/actions/checkout?tab=readme-ov-file#checkout-multiple-repos-nested
      #
      # axelar-contract-deployments
      #   - axelar-amplifier-stellar
      #
      # future steps depend on this directory structure
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout axelar-amplifier-stellar repo
        uses: actions/checkout@v4
        with:
          repository: axelarnetwork/axelar-amplifier-stellar
          path: ./stellar/axelar-amplifier-stellar

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Hardcoded to ensure consistency.
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        shell: bash
        run: npm ci

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.81.0
          targets: wasm32-unknown-unknown

      - name: Build all contracts
        run: |
          # Install Stellar CLI compatible with the soroban-sdk version in Cargo.toml
          cargo install --locked stellar-cli --version 22.2.0 --features opt

          # Build all contracts
          stellar contract build
          ./optimize.sh

          # Process in the release directory
          cd target/wasm32-unknown-unknown/release

          # Remove unoptimized files and rename optimized ones
          # This ensures we only keep the optimized versions
          find . -type f -name "*.wasm" ! -name "*.optimized.wasm" -maxdepth 1 -delete
          find . -name "*.optimized.wasm" -maxdepth 1 -exec sh -c 'mv "$0" "${0%.optimized.wasm}.wasm"' {} \;
          find . -type f ! -name "*.wasm" -delete

      - name: Checkout axelar-contract-deployments repo
        uses: actions/checkout@v4
        with:
          repository: axelarnetwork/axelar-contract-deployments
          path: ./stellar/axelar-contract-deployments

      - name: Setup Wasm Directory
        run: |
          WASM_DIR=../axelar-amplifier-stellar/target/wasm32-unknown-unknown/release
          echo "WASM_DIR=${WASM_DIR}" >> $GITHUB_ENV

      - name: Setup Stellar local network
        run: |
          docker pull stellar/quickstart
          docker run -d --rm -it \
              -p 8000:8000 \
              --name stellar \
              stellar/quickstart:testing \
              --local \
              --enable-soroban-rpc \
              --protocol-version 22

          RPC_URL="http://localhost:8000/soroban/rpc"
          NETWORK_PASSPHRASE="Standalone Network ; February 2017"
          echo "RPC_URL=${RPC_URL}" >> $GITHUB_ENV
          echo "NETWORK_PASSPHRASE=${NETWORK_PASSPHRASE}" >> $GITHUB_ENV

      - name: Add as configured network
        shell: bash
        run: |
          stellar network add local \
              --rpc-url "$RPC_URL" \
              --network-passphrase "$NETWORK_PASSPHRASE"

      - name: Prepare local.json
        run: |
          echo '{
              "chains": {
                  "stellar": {
                      "name": "Stellar",
                      "axelarId": "stellar",
                      "networkType": "local",
                      "chainType": "stellar",
                      "tokenSymbol": "XLM",
                      "tokenAddress": "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC",
                      "rpc": "http://127.0.0.1:8000/soroban/rpc",
                      "horizonRpc": "http://127.0.0.1:8000",
                      "contracts": {}
                  }
              }
          }' > ./axelar-chains-config/info/local.json

      - name: Display local.json
        run: cat ./axelar-chains-config/info/local.json

      - name: Setup Stellar wallet
        run: |
          stellar keys generate test \
              --rpc-url "$RPC_URL" \
              --network-passphrase "$NETWORK_PASSPHRASE" \
              --fund

          STELLAR_PRIVATE_KEY=$(stellar keys show test)
          STELLAR_ADDRESS=$(stellar keys address test)
          echo "STELLAR_PRIVATE_KEY=${STELLAR_PRIVATE_KEY}" >> $GITHUB_ENV
          echo "STELLAR_ADDRESS=${STELLAR_ADDRESS}" >> $GITHUB_ENV

      - name: Prepare .env
        run: |
          echo "PRIVATE_KEY = '$STELLAR_PRIVATE_KEY'" >> .env
          echo "ENV = 'local'" >> .env
          echo "YES = 'true'" >> .env

      ###### Command: Deploy Contract ######
      - name: Deploy AxelarOperators
        run: |
          CONTRACT=AxelarOperators
          node stellar/deploy-contract deploy $CONTRACT --wasm-path $WASM_DIR/$CONTRACT.optimized.wasm

      - name: Deploy AxelarGasService
        run: |
          CONTRACT=AxelarGasService
          node stellar/deploy-contract deploy $CONTRACT --wasm-path $WASM_DIR/$CONTRACT.optimized.wasm

      - name: Deploy AxelarGateway
        run: |
          CONTRACT=AxelarGateway
          node stellar/deploy-contract deploy $CONTRACT --wasm-path $WASM_DIR/$CONTRACT.optimized.wasm

      ###### Command: Gateway ######
      # FIXME:
      # - name: Gateway Approve
      #   run: |
      #     node stellar/gateway approve avalanche 0x32034b47cb29d162d9d803cc405356f4ac0ec07fe847ace431385fe8acf3e6e5-2 0x4F4495243837681061C4743b74B3eEdf548D56A5 wallet 0x1234

      # - name: Gateway Call Contract
      #   run: node stellar/gateway.js call-contract avalanche 0x4F4495243837681061C4743b74B3eEdf548D56A5 0x1234

      # - name: Gateway Rotate Signers
      #   run: |
      #     node stellar/gateway rotate --new-nonce test --signers wallet
      #     node stellar/gateway rotate --new-nonce test2 --current-nonce test --signers wallet

      ###### Command: Operators ######

      - name: Execute is operator
        run: node stellar/operators.js is-operator $STELLAR_ADDRESS

      - name: Execute add operator
        run: node stellar/operators.js add-operator $STELLAR_ADDRESS

      - name: Execute remove operator
        run: node stellar/operators.js remove-operator $STELLAR_ADDRESS

      # TODO: needs gas-service contract
      # - name: Execute refund action
      #   run: node stellar/operators.js --action refund

      # FIXME: find proper way to execute this
      # - name: Execute execute action
      #   run: node stellar/operators.js --action execute --target $STELLAR_ADDRESS --method "is_operator"

      # TODO: currently fails
      # - name: is_operator with estimate_cost
      #   run: node stellar/operators.js --action is_operator --args $STELLAR_ADDRESS --estimate-cost
