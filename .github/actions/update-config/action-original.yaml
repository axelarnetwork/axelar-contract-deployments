name: Update Config
description: Generate config and update external repository via PR.
inputs:
  networks:
    required: true
    description: 'The networks that need to be updated'
  source_repo:
    required: true
    description: 'the repo name that has triggered the PR creation.'
  config_repo:
    required: true
    description: 'The repository on which the configs are set'
  cicd_token:
    required: true
    description: 'The paths used to check on the network changes'

runs:
  using: 'composite'
  steps:
    - name: Checkout current repository
      uses: actions/checkout@v4

    - name: Checkout external config repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.config_repo }}
        path: config-repo
        token: ${{ inputs.cicd_token }}

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get install -y jq
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Setup Branch Name
      shell: bash
      id: branch-name
      run: echo "branch=feat/config-update-$(date +'%Y-%m-%d-%H-%M-%S')" >> "$GITHUB_OUTPUT"

    - name: Create branch and generate config
      shell: bash
      run: |
        cd config-repo
        poetry install --no-interaction

        git config --local user.email "devops@interoplabs.io"
        git config --local user.name "Interop Labs CI"
        git checkout -b ${{ steps.branch-name.outputs.branch }}

        IFS=',' read -ra NETWORK_LIST <<< "${{ inputs.networks }}"
        for NETWORK in "${NETWORK_LIST[@]}"; do
          echo "Generating config for $NETWORK"
          poetry run python generate.py --network "$NETWORK" gen-configs all-configs
        done

        git add --all
        git commit -m "chore: update generated configuration files for ${{ inputs.networks }}"
        git push --set-upstream origin ${{ steps.branch-name.outputs.branch }}

    - name: Create Pull Request
      shell: bash
      id: create_pr
      run: |
        cd config-repo
        PR_TITLE="chore: update configs for ${{ inputs.networks }} from ${{ inputs.source_repo }}"
        PR_BODY="Auto-generated PR with updated configuration files"
        PR_HEAD="${{ steps.branch-name.outputs.branch }}"
        PR_BASE="main"
        # Capture both response and HTTP status code
        RESPONSE=$(curl -s -w "%{http_code}" -o response.json -X POST \
          -H "Authorization: token ${{ inputs.cicd_token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ inputs.config_repo }}/pulls \
          -d "{\"title\":\"$PR_TITLE\",\"body\":\"$PR_BODY\",\"head\":\"$PR_HEAD\",\"base\":\"$PR_BASE\"}")
        HTTP_STATUS=$(echo -n "$RESPONSE" | tail -c 3)
        cat response.json
        PR_NUMBER=$(jq -r .number response.json)
        if [[ "$HTTP_STATUS" != "201" ]] || [[ "$PR_NUMBER" == "null" || -z "$PR_NUMBER" ]]; then
          echo "Failed to create PR. HTTP status: $HTTP_STATUS, PR number: $PR_NUMBER"
          cat response.json
          exit 1
        fi
        echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_ENV"

    - name: Merge Pull Request
      shell: bash
      run: |
        cd config-repo
        PR_NUMBER=${{ env.PR_NUMBER }}
        PR_TITLE="chore: update configs for ${{ inputs.networks }} from ${{ inputs.source_repo }}"
        # Attempt to merge the PR and capture both response and HTTP status code
        RESPONSE=$(curl -s -w "%{http_code}" -o merge_response.json -X PUT \
          -H "Authorization: token ${{ inputs.cicd_token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ inputs.config_repo }}/pulls/$PR_NUMBER/merge \
          -d "{\"commit_title\":\"Merge PR #$PR_NUMBER: $PR_TITLE\",\"merge_method\":\"squash\"}")
        HTTP_STATUS=$(echo -n "$RESPONSE" | tail -c 3)
        cat merge_response.json
        if [[ "$HTTP_STATUS" != "200" ]]; then
          echo "Failed to merge PR. HTTP status: $HTTP_STATUS"
          cat merge_response.json
          exit 1
        fi
        echo "PR #$PR_NUMBER merged successfully."
